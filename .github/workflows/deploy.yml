name: Deploy Docker Stack

on: 
  push: 
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    name: Deploy Docker Stack
    runs-on: ubuntu-latest
    
    env:
      TRAEFIK_HTTP_PORT: ${{ secrets.TRAEFIK_HTTP_PORT }}
      TRAEFIK_HTTPS_PORT: ${{ secrets.TRAEFIK_HTTPS_PORT }}
      BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
      PROMETHEUS_PORT: ${{ secrets.PROMETHEUS_PORT }}
      CADVISOR_PORT: ${{ secrets.CADVISOR_PORT }}
      GRAFANA_PORT: ${{ secrets.GRAFANA_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACTIONS_TOKEN }}
      
      - name: Lint backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./services/backend/Dockerfile

      - name: Lint frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./services/frontend/Dockerfile

      - name: Validate Docker Compose files
        run: |
          docker compose -f ./services/compose.yaml config
          docker compose -f ./monitoring/compose.yaml config
        
      - name: Build and push Backend Docker image
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
        run: |
          REPO=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          docker build \
            --build-arg POSTGRES_USER=$POSTGRES_USER \
            --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --build-arg POSTGRES_DB=$POSTGRES_DB \
            --build-arg BACKEND_PORT=$BACKEND_PORT \
            -t ghcr.io/$REPO/backend:latest ./services/backend
          
          docker push ghcr.io/$REPO/backend:latest

      - name: Build and push Frontend Docker image
        run: |
          REPO=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          docker build -t ghcr.io/$REPO/frontend:latest ./services/frontend
          docker push ghcr.io/$REPO/frontend:latest
      
      - name: Validate docker-compose services
        id: validate_services
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
        run: |
          docker compose -f ./services/compose.yaml up -d

          # Esperar unos segundos para que los servicios se inicialicen
          sleep 10

          # Verificar que todos los contenedores están saludables
          if [ $(docker ps --filter "status=running" | wc -l) -lt 4 ]; then
            echo "Not all containers are healthy"; 
            docker-compose logs;
            exit 1; 
          fi

      - name: Validate docker-compose monitoring
        run: |
          docker compose -f ./monitoring/compose.yaml up -d

          # Esperar unos segundos para que los servicios se inicialicen
          sleep 10

          # Verificar que todos los contenedores están saludables
          if [ $(docker ps --filter "status=running" | wc -l) -lt 3 ]; then
            echo "Not all containers are healthy"; 
            docker-compose logs;
            exit 1; 
          fi

      - name: Clean up services
        if: ${{ failure() && steps.validate_services.conclusion == 'failure' }}
        run: |
          docker-compose down